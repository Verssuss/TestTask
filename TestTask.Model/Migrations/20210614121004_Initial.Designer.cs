// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.Model;

namespace TestTask.Model.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210614121004_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<int>("ExecutorProjectsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExecutorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExecutorProjectsId", "ExecutorsId");

                    b.HasIndex("ExecutorsId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("TestTask.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "igor.p@yandex.ru",
                            Name = "Игорь",
                            Patronymic = "Платонович",
                            Surname = "Панфлов"
                        },
                        new
                        {
                            Id = 2,
                            Email = "stepan.knyazev@mail.ru",
                            Name = "Степан",
                            Patronymic = "Даниилович",
                            Surname = "Князев"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kornilov224@gmail.com",
                            Name = "Аверьян",
                            Patronymic = "Демьянович",
                            Surname = "Корнилов"
                        });
                });

            modelBuilder.Entity("TestTask.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyCustomer")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyExecutor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyCustomer = "Customer",
                            CompanyExecutor = "Executor",
                            EmployeeId = 1,
                            Finish = new DateTime(2021, 6, 24, 19, 10, 4, 365, DateTimeKind.Local).AddTicks(196),
                            LeaderId = 1,
                            Name = "SuperProject",
                            Priority = (byte)3,
                            Start = new DateTime(2021, 6, 14, 19, 10, 4, 364, DateTimeKind.Local).AddTicks(2865)
                        },
                        new
                        {
                            Id = 2,
                            CompanyCustomer = "Customer2",
                            CompanyExecutor = "Executor2",
                            EmployeeId = 2,
                            Finish = new DateTime(2021, 6, 27, 19, 10, 4, 365, DateTimeKind.Local).AddTicks(715),
                            LeaderId = 2,
                            Name = "SuperProject2",
                            Priority = (byte)1,
                            Start = new DateTime(2021, 6, 14, 19, 10, 4, 365, DateTimeKind.Local).AddTicks(711)
                        },
                        new
                        {
                            Id = 3,
                            CompanyCustomer = "Customer3",
                            CompanyExecutor = "Executor3",
                            EmployeeId = 3,
                            Finish = new DateTime(2021, 6, 30, 19, 10, 4, 365, DateTimeKind.Local).AddTicks(721),
                            LeaderId = 3,
                            Name = "SuperProject3",
                            Priority = (byte)2,
                            Start = new DateTime(2021, 6, 14, 19, 10, 4, 365, DateTimeKind.Local).AddTicks(720)
                        });
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("TestTask.Model.Project", null)
                        .WithMany()
                        .HasForeignKey("ExecutorProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Model.Employee", null)
                        .WithMany()
                        .HasForeignKey("ExecutorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTask.Model.Project", b =>
                {
                    b.HasOne("TestTask.Model.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TestTask.Model.Employee", "Leader")
                        .WithMany("LeaderProjects")
                        .HasForeignKey("LeaderId");

                    b.Navigation("Employee");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TestTask.Model.Employee", b =>
                {
                    b.Navigation("EmployeeProjects");

                    b.Navigation("LeaderProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
